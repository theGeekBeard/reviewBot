from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from handlers.users.other import get_cancel_btn
from loader import ADMINS
from keyboards.inline.callback_data import categories_admin_cd
from loader import dp, _, db, bot
from states import states
from utils.mailings import send_products_to_users


@dp.message_handler(user_id=ADMINS, commands=["add_item"])
async def get_category_list(message: types.Message):
    productsCategoriesAdminBtn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=_("üëî–û–¥–µ–∂–¥–∞"),
                                  callback_data=categories_admin_cd.new(category_name='üëî–û–¥–µ–∂–¥–∞')),
             InlineKeyboardButton(text=_('üñ•–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'),
                                  callback_data=categories_admin_cd.new(category_name='üñ•–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞')),
             InlineKeyboardButton(text=_('üèö–î–ª—è –¥–æ–º–∞'),
                                  callback_data=categories_admin_cd.new(category_name='üèö–î–ª—è –¥–æ–º–∞'))]
        ]
    )

    await message.answer(_("üîª–í—ã–±–µ—Ä–∏—Ç–µ <i>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</i>, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä:"),
                         reply_markup=productsCategoriesAdminBtn, parse_mode="HTML")


@dp.callback_query_handler(categories_admin_cd.filter())
async def ask_product_name(call: CallbackQuery, state: FSMContext, callback_data: dict):
    categoryName = callback_data.get("category_name")

    async with state.proxy() as data:
        data['categoryName'] = categoryName
        data['message_id'] = call.message.message_id

    text = _("<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b> ") + " <i>" + _(str(categoryName)) + "</i>\n\n" + \
           _("üîª–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <i>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</i>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å")

    await call.message.edit_text(text, reply_markup=await get_cancel_btn(), parse_mode="HTML")

    await states.Product.name.set()


@dp.message_handler(state=states.Product.name)
async def ask_product_photo(message: types.Message, state: FSMContext):
    productName = message.text

    async with state.proxy() as data:
        categoryName = data['categoryName']
        messageId = data['message_id']
        data['productName'] = productName
        data['message_id'] = message.message_id + 1

    text = _("üóÇ<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + _(str(categoryName)) + "</i>\n" + \
           _("üìÉ<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + str(productName) + "</i>\n\n" + \
           _("üîª–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ <i>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</i> —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã")

    await bot.edit_message_reply_markup(message.chat.id, messageId, reply_markup=None)
    await message.answer(text, reply_markup=await get_cancel_btn(), parse_mode="HTML")

    await states.Product.photo.set()


@dp.message_handler(state=states.Product.photo, content_types=types.ContentType.PHOTO)
async def ask_product_price(message: types.Message, state: FSMContext):
    productPhoto = message.photo[-1].file_id

    async with state.proxy() as data:
        categoryName = data['categoryName']
        productName = data['productName']
        messageId = data['message_id']
        data['productPhoto'] = productPhoto
        data['message_id'] = message.message_id + 1

    text = _("üóÇ<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + _(str(categoryName)) + "</i>\n" + \
           _("üìÉ<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + str(productName) + "</i>\n\n" + \
           _("üîª–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ <i>—Å—Ç–æ–∏–º–æ—Å—Ç—å</i> —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö(‚ÇΩ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã")

    await bot.edit_message_reply_markup(message.chat.id, messageId, reply_markup="")

    await message.answer_photo(photo=productPhoto, caption=text, reply_markup=await get_cancel_btn(), parse_mode="HTML")

    await states.Product.price.set()


@dp.message_handler(state=states.Product.price)
async def confirm_adding_product(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)

        async with state.proxy() as data:
            categoryName = data['categoryName']
            productName = data['productName']
            productPhoto = data['productPhoto']
            messageId = data['message_id']
            data['price'] = price

        await bot.edit_message_reply_markup(message.chat.id, message_id=messageId, reply_markup='')
    except ValueError:
        text = _("‚ùå–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        await message.answer(text)
        return

    text = _("üóÇ<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + _(str(categoryName)) + "</i>\n" + \
           _("üìÉ<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + productName + "</i>\n" + \
           _("üí∞<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + str(price) + "</i>\n\n" + \
           _("üîª–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä?")

    markup = await get_cancel_btn()
    markup.add(InlineKeyboardButton(text=_("–î–æ–±–∞–≤–∏—Ç—å"), callback_data='add'))
    await message.answer_photo(photo=productPhoto, caption=text, reply_markup=markup, parse_mode="HTML")

    await states.Product.confirm.set()


@dp.callback_query_handler(text="add", state=states.Product.confirm)
async def add_product(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        categoryName = data['categoryName']
        productName = data['productName']
        productPhoto = data['productPhoto']
        productPrice = data['price']

    await db.add_new_product(productName, productPhoto, productPrice, categoryName)

    await call.message.delete()

    text = _("üóÇ<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + _(str(categoryName)) + "</i>\n" + \
           _("üìÉ<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + productName + "</i>\n" + \
           _("üí∞<b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:</b> ") + " <i>" + str(productPrice) + "</i>\n\n"

    await call.message.answer_photo(photo=productPhoto, caption=text + _("‚úÖ<b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω</b>"),
                                    parse_mode="HTML")

    await send_products_to_users(text, productPhoto)

    await state.reset_state()
