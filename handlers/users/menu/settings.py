from typing import Union

from aiogram import types
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton

from handlers.users.commands.menu import show_menu
from handlers.users.other import send_application
from keyboards.inline.callback_data import language_cd, make_lang_cd
from loader import dp, _, db


@dp.message_handler(text=["‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏èSettings", "‚öôÔ∏è–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"])
async def get_settings_info(message: Union[types.Message, CallbackQuery]):
    text = _("–†–∞–∑–¥–µ–ª *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n")

    settingsBtn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=_('üè≥Ô∏è–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫'), callback_data="change_lang"),
             InlineKeyboardButton(text=_('üåü–°—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'), callback_data="become_admin")]
        ]
    )

    if isinstance(message, types.Message):
        await message.answer(text, reply_markup=settingsBtn, parse_mode="Markdown")
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_text(_(text), reply_markup=settingsBtn, parse_mode="Markdown")


@dp.callback_query_handler(text="change_lang")
async def change_language(call: Union[CallbackQuery, types.Message], isStart=False):
    langBtn = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üá∑üá∫–†—É—Å—Å–∫–∏–π',
                                  callback_data=make_lang_cd(language="RU", isStart=isStart))],
            [InlineKeyboardButton(text='üá¨üáßÛ†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†ÅøEnglish',
                                  callback_data=make_lang_cd(language="EN", isStart=isStart))],
            [InlineKeyboardButton(text='üá∫üá¶–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π',
                                  callback_data=make_lang_cd(language="UK", isStart=isStart))]
        ]
    )

    if not isStart:
        langBtn.row(
            InlineKeyboardButton(text=_("üîô–ù–∞–∑–∞–¥"),
                                 callback_data=make_lang_cd(back="1", isStart=isStart)))

    if isinstance(call, types.Message):
        message = call
        await message.answer("üîª–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: \n\nüîªSelect language:", reply_markup=langBtn)
    elif isinstance(call, CallbackQuery):
        await call.message.edit_text("üîª–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫: \n\nüîªSelect language:", reply_markup=langBtn)


@dp.callback_query_handler(language_cd.filter(back="1"))
async def come_back(call: CallbackQuery, callback_data):
    await get_settings_info(call)


@dp.callback_query_handler(language_cd.filter())
async def set_language(call: CallbackQuery, callback_data: dict):
    language = callback_data.get("language")

    await db.set_language(language)

    if callback_data["isStart"] == "True":
        await call.message.delete()
        await call.message.answer(_("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                                    "–≠—Ç–æ ReviewBot - –±–æ—Ç, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ "
                                    "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤. –ë–æ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ "
                                    "—Ç–æ–≤–∞—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç 0 –¥–æ 10 —Ä—É–±.\n\n"
                                    "<b>–í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∏–∫–∞–∫–∏—Ö —Å–µ—Ä—å–µ–∑–Ω—ã—Ö"
                                    " –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –∑–¥–µ—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>\n\n"
                                    "–î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–ü–æ–º–æ—â—å</b> –∏–∑ –ø—É–Ω–∫—Ç–∞ "
                                    "–º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞."
                                    "\n\n–î–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å–æ–∑–¥–∞–ª @theGeekBeard. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º –º–æ–∂–Ω–æ "
                                    "—É–∑–Ω–∞—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è, –∞ —Ç–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞–≤ –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                                    locale=language),
                                  parse_mode="HTML")
        await show_menu(call.message, locale=language)
    else:
        await call.message.edit_text(
            _("‚úÖ*–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω*\n\n–ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é", locale=language),
            reply_markup=None, parse_mode="Markdown")


@dp.callback_query_handler(text="become_admin")
async def set_admin(call: CallbackQuery):
    userId = call.message.chat.id

    admin = db.get_admins(user_id=userId)
    if admin:
        return await call.answer(_("üî¥–í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"))
    username = call.message.chat.username
    text = _("üîú...–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n" \
             "–ë–æ—Ç —Å–æ–æ–±—â–∏—Ç, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞")

    await call.message.edit_text(text, reply_markup=None)

    await send_application(username, userId)
